{"ast":null,"code":"var _jsxFileName = \"/Users/ameyajadhav/Documents/Projects/proper-noun-correction/frontend/src/components/TranscriptionDisplay.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranscriptionDisplay = ({\n  transcription\n}) => {\n  // Simple regex to identify capitalized words as potential proper nouns\n  const words = transcription.split(' ').map((word, index) => {\n    const isProperNoun = /^[A-Z][a-z]+$/.test(word);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: isProperNoun ? {\n        textDecoration: 'underline',\n        cursor: 'pointer'\n      } : {},\n      children: word + ' '\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: words\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n_c = TranscriptionDisplay;\nexport default TranscriptionDisplay;\nvar _c;\n$RefreshReg$(_c, \"TranscriptionDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TranscriptionDisplay","transcription","words","split","map","word","index","isProperNoun","test","style","textDecoration","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ameyajadhav/Documents/Projects/proper-noun-correction/frontend/src/components/TranscriptionDisplay.tsx"],"sourcesContent":["import React from 'react';\n\ninterface Props {\n  transcription: string;\n}\n\nconst TranscriptionDisplay: React.FC<Props> = ({ transcription }) => {\n  // Simple regex to identify capitalized words as potential proper nouns\n  const words = transcription.split(' ').map((word, index) => {\n    const isProperNoun = /^[A-Z][a-z]+$/.test(word);\n    return (\n      <span\n        key={index}\n        style={\n          isProperNoun ? { textDecoration: 'underline', cursor: 'pointer' } : {}\n        }>\n        {word + ' '}\n      </span>\n    );\n  });\n\n  return <div>{words}</div>;\n};\n\nexport default TranscriptionDisplay;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM1B,MAAMC,oBAAqC,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EACnE;EACA,MAAMC,KAAK,GAAGD,aAAa,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC1D,MAAMC,YAAY,GAAG,eAAe,CAACC,IAAI,CAACH,IAAI,CAAC;IAC/C,oBACEN,OAAA;MAEEU,KAAK,EACHF,YAAY,GAAG;QAAEG,cAAc,EAAE,WAAW;QAAEC,MAAM,EAAE;MAAU,CAAC,GAAG,CAAC,CACtE;MAAAC,QAAA,EACAP,IAAI,GAAG;IAAG,GAJNC,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKN,CAAC;EAEX,CAAC,CAAC;EAEF,oBAAOjB,OAAA;IAAAa,QAAA,EAAMV;EAAK;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC3B,CAAC;AAACC,EAAA,GAhBIjB,oBAAqC;AAkB3C,eAAeA,oBAAoB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}