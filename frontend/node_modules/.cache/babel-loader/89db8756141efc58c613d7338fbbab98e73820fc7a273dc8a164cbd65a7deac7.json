{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const TranscriptionDisplay=_ref=>{let{transcription}=_ref;// Simple regex to identify capitalized words as potential proper nouns\nconst words=transcription.split(' ').map((word,index)=>{const isProperNoun=/^[A-Z][a-z]+$/.test(word);return/*#__PURE__*/_jsx(\"span\",{style:isProperNoun?{textDecoration:'underline',cursor:'pointer'}:{},children:word+' '},index);});return/*#__PURE__*/_jsx(\"div\",{children:words});};export default TranscriptionDisplay;","map":{"version":3,"names":["React","jsx","_jsx","TranscriptionDisplay","_ref","transcription","words","split","map","word","index","isProperNoun","test","style","textDecoration","cursor","children"],"sources":["/Users/ameyajadhav/Documents/Projects/proper-noun-correction/frontend/src/components/TranscriptionDisplay.tsx"],"sourcesContent":["import React from 'react';\n\ninterface Props {\n  transcription: string;\n}\n\nconst TranscriptionDisplay: React.FC<Props> = ({ transcription }) => {\n  // Simple regex to identify capitalized words as potential proper nouns\n  const words = transcription.split(' ').map((word, index) => {\n    const isProperNoun = /^[A-Z][a-z]+$/.test(word);\n    return (\n      <span\n        key={index}\n        style={\n          isProperNoun ? { textDecoration: 'underline', cursor: 'pointer' } : {}\n        }>\n        {word + ' '}\n      </span>\n    );\n  });\n\n  return <div>{words}</div>;\n};\n\nexport default TranscriptionDisplay;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAM1B,KAAM,CAAAC,oBAAqC,CAAGC,IAAA,EAAuB,IAAtB,CAAEC,aAAc,CAAC,CAAAD,IAAA,CAC9D;AACA,KAAM,CAAAE,KAAK,CAAGD,aAAa,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CAC1D,KAAM,CAAAC,YAAY,CAAG,eAAe,CAACC,IAAI,CAACH,IAAI,CAAC,CAC/C,mBACEP,IAAA,SAEEW,KAAK,CACHF,YAAY,CAAG,CAAEG,cAAc,CAAE,WAAW,CAAEC,MAAM,CAAE,SAAU,CAAC,CAAG,CAAC,CACtE,CAAAC,QAAA,CACAP,IAAI,CAAG,GAAG,EAJNC,KAKD,CAAC,CAEX,CAAC,CAAC,CAEF,mBAAOR,IAAA,QAAAc,QAAA,CAAMV,KAAK,CAAM,CAAC,CAC3B,CAAC,CAED,cAAe,CAAAH,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}